"""
Módulo csv_analyzer.py
======================

[PT-BR] Responsável por analisar o CSV gerado pelo sistema de captura de dados dos Pokémon,
identificando dados ausentes, tipos de dados e gerando um sumário básico de informações.

[EN] Responsible for analyzing the CSV generated by the Pokémon data collection system,
identifying missing data, data types, and generating a basic dataset summary.

Uso típico / Typical usage:

    analyzer = PokemonCSVAnalyzer("output/pokemons.csv")
    analyzer.run_full_report()
"""
import logging
from typing import Optional
import pandas as pd  # type: ignore
from pandas.errors import EmptyDataError, ParserError # type: ignore

class PokemonCSVAnalyzer:
    """
    [PT-BR] Classe utilitária para executar diferentes validações em um CSV de Pokémon.
    [EN] Utility class to run various validations on a Pokémon CSV.
    """

    def __init__(self, csv_path: str, encoding: str = "utf-8"):
        self.csv_path = csv_path
        self.encoding = encoding
        try:
            self.df = pd.read_csv(csv_path, encoding=encoding)
            logging.info("CSV loaded successfully from '%s' (%d rows, %d columns)",
                         csv_path, len(self.df), len(self.df.columns))
        except (FileNotFoundError, UnicodeDecodeError, EmptyDataError, ParserError) as e:
            logging.error("Failed to load CSV '%s': %s", csv_path, str(e), exc_info=True)
            raise

    def log_summary(self, head_n: int = 5) -> None:
        """
        [PT-BR] Exibe no log um resumo estatístico e estrutural do conjunto de dados.
        [EN] Logs a structural and statistical summary of the dataset.
        """
        logging.info("=== Dataset summary ===")
        logging.info("Total rows   : %d", len(self.df))
        logging.info("Total columns: %d", len(self.df.columns))
        logging.info("Column names : %s", list(self.df.columns))

        logging.info("Column dtypes:")
        for col, dtype in self.df.dtypes.items():
            logging.info("  • %-20s %s", col, dtype)

        logging.info("First %d rows:", head_n)
        for idx, row in self.df.head(head_n).iterrows():
            logging.info("  Row %d → %s", idx, row.to_dict())

        stats = self.df.describe(include='all').transpose()
        logging.info("Statistical summary:")
        for col in stats.index:
            logging.info("  • %-20s %s", col, stats.loc[col].dropna().to_dict())

    def log_missing_values(self) -> None:
        """
        [PT-BR] Exibe no log a quantidade de valores ausentes por coluna.
        [EN] Logs the number of missing (blank or empty) values per column.
        """
        missing_mask = self.df.isna() | (self.df == "")
        missing_counts = missing_mask.sum()
        total_missing = missing_counts.sum()

        logging.info("=== Missing-value check ===")
        if total_missing == 0:
            logging.info("All columns are fully populated.")
            return

        logging.warning("Found %d missing value(s) across the dataset.", total_missing)
        for col, cnt in missing_counts[missing_counts > 0].sort_values(ascending=False).items():
            logging.warning("  • %-20s %d missing", col, cnt)

    def run_full_report(self, show_summary: bool = True, check_missing: bool = True, head_n: int = 5) -> None:
        """
        [PT-BR] Executa as análises selecionadas em sequência.
        [EN] Runs selected analyses in sequence.

        Parâmetros:
            show_summary (bool): mostra o resumo estrutural e estatístico.
            check_missing (bool): verifica valores ausentes.
            head_n (int): número de linhas a exibir no resumo.
        """
        if show_summary:
            self.log_summary(head_n=head_n)
        if check_missing:
            self.log_missing_values()